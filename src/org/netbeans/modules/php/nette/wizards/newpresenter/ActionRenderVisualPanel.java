/*
 * The MIT license
 *
 * Copyright (c) 2010 Radek Ježdík <redhead@email.cz>, Ondřej Brejla <ondrej@brejla.cz>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package org.netbeans.modules.php.nette.wizards.newpresenter;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.netbeans.modules.php.nette.generators.actionrender.ActionRenderMethodChecker;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 * Panel for adding action and/or render methods and for generating their templates.
 *
 * @author Ondřej Brejla <ondrej@brejla.cz>
 */
public final class ActionRenderVisualPanel extends JPanel {

    private DefaultTableModel tableModel;

	private ImageIcon warningIcon = ImageUtilities.loadImageIcon("org/netbeans/modules/php/nette/resources/warning_icon.png", true);

	private ActionRenderMethodChecker methodChecker;

    /** Creates new form NewPresenterVisualPanel1 */
    public ActionRenderVisualPanel(DefaultTableModel tableModel) {
		this.tableModel = tableModel;

        initComponents();

        warningLabel.setText("");
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(ActionRenderVisualPanel.class, "TXT_actionrender_visual_panel_name");
    }

	/**
	 * Returns template directory.
	 *
	 * @return
	 */
    public String getTemplatesDirectory() {
        return templatesDirectoryTextField.getText();
    }

	/**
	 * Returns all actions which shoud be created.
	 *
	 * @return
	 */
    public Object[] getActions() {
        Object[] actions = new Object[tableModel.getRowCount()];

        for (int i = 0; i < tableModel.getRowCount(); i++) {
            HashMap<String, Object> action = new HashMap<String, Object>();

            action.put("name", tableModel.getValueAt(i, 0));
            action.put("action", tableModel.getValueAt(i, 1));
            action.put("render", tableModel.getValueAt(i, 2));
            action.put("template", tableModel.getValueAt(i, 3));

            actions[i] = action;
        }

        return actions;
    }

	/**
	 * Sets a method checker.
	 *
	 * @param methodChecker
	 */
	public void setMethodChecker(ActionRenderMethodChecker methodChecker) {
		this.methodChecker = methodChecker;
	}

	/**
	 * Sets presenter directory -> transformed into template directory.
	 *
	 * @param presentersDir
	 */
    public void setPresentersDirectory(String presentersDir) {
        File f = new File(presentersDir + "/../templates");

        if (!f.exists()) {
            f = new File(presentersDir + "/../");
        }

        try {
            f = new File(f.getCanonicalPath());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

		setTemplatesDirectory(f.getPath());
    }

	/**
	 * sets templates directory.
	 *
	 * @param templatesDir
	 */
	public void setTemplatesDirectory(String templatesDir) {
		templatesDirectoryTextField.setText(templatesDir);
        directoryChooser.setCurrentDirectory(new File(templatesDir));
	}

	/**
	 * Returns true if 'the dotted notation' shoud be used.
	 *
	 * @return
	 */
    public boolean isDottedNotationSelected() {
        return dottedNotationCheckBox.isSelected();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directoryChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        actionNameText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        actionTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        warningLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        templatesDirectoryTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        dottedNotationCheckBox = new javax.swing.JCheckBox();

        directoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.jLabel2.text")); // NOI18N

        actionNameText.setText(org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.actionNameText.text")); // NOI18N
        actionNameText.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                actionNameTextCaretUpdate(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addButton, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.addButton.text")); // NOI18N
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        actionTable.setModel(tableModel);
        actionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(actionTable);

        org.openide.awt.Mnemonics.setLocalizedText(deleteButton, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.deleteButton.text")); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(warningLabel, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.warningLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.jLabel4.text")); // NOI18N

        templatesDirectoryTextField.setEditable(false);
        templatesDirectoryTextField.setText(org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.templatesDirectoryTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dottedNotationCheckBox, org.openide.util.NbBundle.getMessage(ActionRenderVisualPanel.class, "ActionRenderVisualPanel.dottedNotationCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(dottedNotationCheckBox))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(templatesDirectoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(warningLabel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(actionNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(templatesDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dottedNotationCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningLabel))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addAction();
    }//GEN-LAST:event_addButtonActionPerformed

    private void actionNameTextCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_actionNameTextCaretUpdate
        if (isValidAction(actionNameText.getText())) {
            addButton.setEnabled(true);
        } else {
            if (actionNameText.getText().trim().isEmpty()) {
                hideWarning();
            }
            addButton.setEnabled(false);
        }
    }//GEN-LAST:event_actionNameTextCaretUpdate

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = actionTable.getSelectedRow();
        if (row != -1) {
            int result = JOptionPane.showConfirmDialog(this,
					NbBundle.getMessage(ActionRenderVisualPanel.class, "TXT_delete_row_confirm_text"),
					NbBundle.getMessage(ActionRenderVisualPanel.class, "TXT_delete_row_confirm_title"),
					JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                tableModel.removeRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(this,
					NbBundle.getMessage(ActionRenderVisualPanel.class, "TXT_no_action_selected_text"),
					NbBundle.getMessage(ActionRenderVisualPanel.class, "TXT_no_action_selected_title"),
					JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        int result = directoryChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            templatesDirectoryTextField.setText(directoryChooser.getSelectedFile().toString());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

	/**
	 * Adds action into the table.
	 */
    private void addAction() {
        if (isValidAction(actionNameText.getText())) {
            tableModel.addRow(new Object[]{actionNameText.getText(), false, false, true});
            actionNameText.setText("");
            addButton.setEnabled(false);
            hideWarning();
            actionNameText.requestFocus();
        }
    }

	/**
	 * Checks if passed action is valid.
	 *
	 * @param action
	 * @return
	 */
    private boolean isValidAction(String action) {
        if (isValidActionFormat(action) && !actionExists(action)) {
            hideWarning();

            return true;
        }

        return false;
    }

	/**
	 * Checks if passed action has a valid format.
	 *
	 * @param action
	 * @return
	 */
    private boolean isValidActionFormat(String action) {
        if (action.trim().matches("^[a-zA-Z0-9][a-zA-Z0-9_]*$")) {
            return true;
        }

        showWarning(NbBundle.getMessage(ActionRenderVisualPanel.class, "WRN_invalid_action_format"));

        return false;
    }

	/**
	 * Checks if passed action does not exists.
	 *
	 * @param newAction
	 * @return
	 */
    private boolean actionExists(String newAction) {
        String oldAction = null;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            oldAction = (String) tableModel.getValueAt(i, 0);
            if (oldAction.equals(newAction)) {
                showWarning(NbBundle.getMessage(ActionRenderVisualPanel.class, "WRN_action_exists"));

                return true;
            }
        }

		if (methodChecker != null) {
			if (methodChecker.existsActionMethod(newAction) && methodChecker.existsRenderMethod(newAction)) {
				showWarning(NbBundle.getMessage(ActionRenderVisualPanel.class, "WRN_action_render_method_exists"));

                return true;
			}
		}

        return false;
    }

	/**
	 * Shows warning message.
	 *
	 * @param warning
	 */
    private void showWarning(String warning) {
        warningLabel.setIcon(warningIcon);
        warningLabel.setText(warning);
    }

	/**
	 * Hides warning message.
	 */
    private void hideWarning() {
        warningLabel.setIcon(null);
        warningLabel.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actionNameText;
    private javax.swing.JTable actionTable;
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JCheckBox dottedNotationCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField templatesDirectoryTextField;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
